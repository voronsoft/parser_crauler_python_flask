# !!! Для разработки - динамического типа контейнеры

version: '3'

# сервисы
services:
  # название нашего приложения (сервиса)
  parser-app:
    restart: always
    # создание образа для нашего приложения
    build: .
    # Маппинг порта контейнера 5000 на порт хост-системы 5000
    ports:
      - "5000:5000"
    # строка указывает на очередность создания сервиса
    # делается это для того, что-бы при запуске фронта не возникло ошибки
    # если произойдет обращение к БД
    # то есть сначала будет собран сервис ( контейнер БД а потом лишь фронт и так далее)
    depends_on:
      - mysql
    # подключаем внешний том на локалке, для редактирования при разработке
    volumes:
      - ./:/flask-parser-app
      - files_data:/links.txt
      - files_data:/state.txt
      - files_data:/uploads

  # создание бд (сервиса)
  mysql:
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: db_parser

    # при инициализируем бд выполняем код скрипта создание таблиц в бд (строка 1)
    # подключаем внешний том для бд что бы хранить измененные данные
    # то есть при удалении контейнеров и создании новых
    # будет подключен внешний том с измененными данными (строка 2)
    volumes:
      - ./sql-scripts:/docker-entrypoint-initdb.d
      - mysql_data_parser:/var/lib/mysql

  # сервис для администрирования бд mysql
  adminer:
    image: adminer
    restart: always
    # Маппинг порта контейнера 8080 на порт хост-системы 8080
    ports:
      - 8888:8080

# создаем том на хосте для хранения данных бд
volumes:
  mysql_data_parser:
  files_data:
